{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "6527a0",
      "Name": "CardCustom",
      "Transform": {
        "posX": 19.5763016,
        "posY": 0.9887669,
        "posZ": 34.1867447,
        "rotX": -2.91450775E-08,
        "rotY": 90.004,
        "rotZ": -4.69504857E-06,
        "scaleX": 1.64346778,
        "scaleY": 1.0,
        "scaleZ": 1.64346778
      },
      "Nickname": "Progressive Growth (B)",
      "Description": "Cost: 23\nTags: Earth Plant\nReqs: 2 Greens\nAction1: 3 Energy 3 Plants -> 1 PlantsProd\nAction1Props: canBeUndone Pos (0,0.25,-0.86)",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 0.4981711,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 89300,
      "SidewaysCard": false,
      "CustomDeck": {
        "893": {
          "FaceURL": "file:///F:\\.mars\\Cards\\Sk01_Progressive_Growth.png",
          "BackURL": "file:///F:\\.mars\\Cards\\Back.png",
          "NumWidth": 1,
          "NumHeight": 1,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "\n\n\n\ncardUxLibrary={}\ncardUxLibrary.addOffset=function(object,v2)\nlocal v1=object.position\nobject.position={(v1[1] or v1.x) + (v2[1] or v2.x),\n(v1[2] or v1.y) + (v2[2] or v2.y),\n(v1[3] or v1.z) + (v2[3] or v2.z)\t}\nend\n\nscriptVersion=1\nactivateButtonColor={0/255,255/255,130/255,0.75}\nactivateButtonDefaultPosition={0,0.25,0.12}\nspawnedButtons=0\ndefaultCardState={\nactive=false,\nisBasicScriptingCard=false,\ninActivatonZone=false,\nowner=nil,\nwasUpdated=true,\n}\ncardProperties={}\nfunction onload(saved_data)\nif saved_data~=\"\" then\nlocal loaded_data=JSON.decode(saved_data)\nif loaded_data.scriptVersion~=scriptVersion then\nsaved_data=\"\"\nend\nend\nif saved_data~=\"\" then\nlocal loaded_data=JSON.decode(saved_data)\ncardState=loaded_data.cardState\nelse\ncardState=defaultCardState\nend\nif saved_data~=\"\" and loadCallback~=nil then\nloadCallback(true)\nend\ncreateButtons()\nend\nfunction onSave()\nif not cardState.wasUpdated then\nreturn\nend\ncardState.wasUpdated=false\nsaved_data=JSON.encode({cardState=cardState,scriptVersion=scriptVersion})\nreturn saved_data\nend\nfunction createButtons()\nif not cardState.active then\ncreateActivateButtons()\nend\nend\nfunction activateCard(_,playerColor)\nif not Global.call(\"getExtendedScriptingState\") then\nonCardActivated(playerColor)\nreturn\nend\nif eventHandlers~=nil then\ncardProperties.eventHandlers=eventHandlers\nend\nGlobal.call(\"objectActivationSystem_activateObject\",{playerColor=playerColor,object=self,sourceName=self.getName(),activationEffects=cardProperties,description=self.getDescription()})\nend\nfunction isProjectCard()\nreturn Global.call(\"descriptionInterpreter_isProjectCard\",self.getDescription())\nend\nfunction hasRequirements()\nreturn Global.call(\"descriptionInterpreter_hasRequirements\",self.getDescription())\nend\nfunction getTags()\nreturn Global.call(\"descriptionInterpreter_getValues\",{description=self.getDescription(),pattern=\"Tags?:\"})\nend\nfunction getProductionValues()\nreturn cardProperties.productionValues\nend\nfunction getResourceValues()\nreturn cardProperties.resourceValues\nend\nfunction getEffects()\nreturn cardProperties.effects\nend\nfunction onCardActivated(playerColor)\ncardState.active=true\ncardState.owner=playerColor\nif setupBlueCard~=nil then\nsetupBlueCard(playerColor)\nend\nremoveButtons()\ncreateButtons()\nif onCardActivatedExtended~=nil then\nWait.frames(function() onCardActivatedExtended(playerColor) end,3)\nend\nupdateDebugInfos()\ncardState.wasUpdated=true\nself.script_state=onSave()\nend\nfunction updateDebugInfos()\nlocal gameState=Global.call(\"getGameState\")\nif cardState.debug==nil then\ncardState.debug={}\nend\ncardState.debug.cardActivatedInGeneration=gameState.currentGeneration\ncardState.debug.cardActivatedInPhase=gameState.currentPhase\ncardState.debug.dates={\"cardActivated: \"..os.date()}\nend\nfunction removeButtons()\nlocal buttons=self.getButtons()\nif buttons~=nil then\nfor i=#buttons,1,-1 do\nself.removeButton(buttons[i].index)\nspawnedButtons=spawnedButtons - 1\nend\nend\nend\nfunction createActivateButtons()\nif not Global.call(\"getExtendedScriptingState\") and not cardState.isBasicScriptingCard then\nreturn\nend\nfor i,button in pairs(buttonSetup.activateButtons) do\nif button.index==nil then\nbutton.index=spawnedButtons\nself.createButton(button)\nspawnedButtons=spawnedButtons + 1\nend\nend\nend\nfunction setInActivatonZone(newValue)\ncardState.inActivatonZone=newValue\nend\nbuttonSetup={}\nbuttonSetup.activateButtons={}\nbuttonSetup.activateButtons[1]={\nlabel=\"\",\nclick_function=\"activateCard\",\ntooltip=\"Click to activate Card Code.\",\nfunction_owner=self,\nposition=activateButtonDefaultPosition,\nheight=175,\nwidth=350,\nalignment=3,\nscale={x=1.5,y=1.5,z=1.5},\nfont_size=1,\nfont_color={95/255,120/255,0/255,1},\ncolor=activateButtonColor,\n}\n\n\nactionCardInterpreter={}\nactionCardInterpreter.translateRawData=function(input)\nlocal counterType=\"Other\"\nif next(input.counterTypeTable)~=nil then\ncounterType=input.counterTypeTable[1]\nend\nlocal actionDefinitions=translateActions(input.rawActions,input.rawActionButtonProperties)\nlocal actionButtonProperties=translateActionButtonProperties(input.rawActionButtonProperties)\nlocal eventHandlers=translateEventHandlers(input.rawEventHandlers)\nlocal counters=translateCounters(input.rawCounters)\nlocal intermediateActions={}\nfor actionIndex,actionDefinition in pairs(actionDefinitions) do\nlocal propertiesIndex=-1\nfor foundIndex,buttonInfo in pairs(actionButtonProperties) do\nif tonumber(buttonInfo.actionIndex)==tonumber(actionIndex) then\npropertiesIndex=foundIndex\nend\nend\nif propertiesIndex~=-1 then\nintermediateActions[actionIndex]={actionDefinition=actionDefinition,buttonInfo=actionButtonProperties[propertiesIndex]}\nelse\nintermediateActions[actionIndex]={actionDefinition=actionDefinition}\nend\nend\nreturn {actions=intermediateActions,counters=counters,counterType=counterType,eventHandlers=eventHandlers}\nend\nfunction translateCounters(rawCounters)\nlocal counterDefinitions={}\nfor _,rawCounter in pairs(rawCounters) do\nlocal definition={name=rawCounter[1]}\nlocal size=getVectorFromTable(rawCounter,\"Size\")\nif size~=nil and #size~=0 then\ndefinition.width=tonumber(size[1])\ndefinition.height=tonumber(size[2])\nend\nlocal position=getVectorFromTable(rawCounter,\"Pos\")\nif position~=nil and #position~=0 then\ndefinition.position={tonumber(position[1]),tonumber(position[2]),tonumber(position[3])}\nend\nlocal color=getVectorFromTable(rawCounter,\"Color\")\nif color~=nil and #color~=0 then\ndefinition.color={tonumber(color[1]),tonumber(color[2]),tonumber(color[3]),tonumber(color[4])}\nend\nlocal startingAmount=getVectorFromTable(rawCounter,\"StartCount\")\nif startingAmount~=nil and next(startingAmount)~=nil then\ndefinition.startCount={simple=0,complex={}}\nfor _,entry in pairs(startingAmount) do\nif tonumber(entry)~=nil then\ndefinition.startCount.simple=definition.startCount.simple + entry\nelse\ntable.insert(definition.startCount.complex,entry)\nend\nend\nend\ntable.insert(counterDefinitions,definition)\nend\nreturn counterDefinitions\nend\nfunction translateActionButtonProperties(rawActionButtonsProperties)\nlocal actionButtonInfos={}\nfor actionIndex,rawButtonInfos in pairs(rawActionButtonsProperties) do\nlocal actionButtonInfo={actionIndex=actionIndex}\nlocal size=getVectorFromTable(rawButtonInfos,\"Size\")\nif size~=nil and #size~=0 then\nactionButtonInfo.width=tonumber(size[1])\nactionButtonInfo.height=tonumber(size[2])\nend\nlocal position=getVectorFromTable(rawButtonInfos,\"Pos\")\nif position~=nil and #position~=0 then\nactionButtonInfo.position={tonumber(position[1]),tonumber(position[2]),tonumber(position[3])}\nend\nlocal color=getVectorFromTable(rawButtonInfos,\"Color\")\nif color~=nil and #color~=0 then\nactionButtonInfo.color={tonumber(color[1]),tonumber(color[2]),tonumber(color[3]),tonumber(color[4])}\nend\ntable.insert(actionButtonInfos,actionButtonInfo)\nend\nreturn actionButtonInfos\nend\nfunction getVectorFromTable(rawButtonInfos,vectorIdentifier,filter)\nlocal isPositionValue=false\nlocal relevant=false\nresult={}\nfor _,value in pairs(rawButtonInfos) do\nif relevant then\nfor substring in string.gmatch(value,\"[-0-9.A-Za-z)]+\") do\nif string.match(substring,\"[)]\")~=nil then\nif string.match(substring,\"[-0-9.A-Za-z]+\") then\ntable.insert(result,string.match(substring,\"[-0-9.A-Za-z]+\"))\nend\nrelevant=false\nelse\ntable.insert(result,substring)\nend\nend\nend\nif value==vectorIdentifier then\nrelevant=true\nend\nend\nreturn result\nend\nfunction translateEventHandlers(rawEventHandlers)\nlocal eventHandlers={}\nfor eventHandlerIndex,rawEventHandler in pairs(rawEventHandlers) do\nlocal actionIndex=string.match(rawEventHandler[4],\"[0-9]\")\nlocal allowedPhases=nil\nlocal allowedPhasesRaw=getVectorFromTable(rawEventHandler,\"AllowedPhases\")\nif rawEventHandler[5]~=nil then\nallowedPhases={}\nfor _,phase in pairs(allowedPhasesRaw) do\ntable.insert(allowedPhases,phase)\nend\nend\neventHandlers[eventHandlerIndex]={triggerType=rawEventHandler[2],triggerScope=rawEventHandler[1],actionIndex=tonumber(actionIndex),allowedPhases=allowedPhases}\nend\nreturn eventHandlers\nend\nfunction translateActions(rawActions,otherProperties)\nlocal actionDefinitions={}\nfor actionIndex,rawAction in pairs(rawActions) do\nlocal halfs=splitStringInTwoHalfs(rawAction,\"->\")\nlocal leftSideSorted=sortByKeyValuePairsAndSingleValues(halfs.leftSide)\nlocal rightSideSorted=sortByKeyValuePairsAndSingleValues(halfs.rightSide)\nlocal actionPropertiesAndFuncs=createActionProperties(leftSideSorted,rightSideSorted)\nlocal action={}\naction.actionIndex=tonumber(actionIndex)\naction.actionProperties=actionPropertiesAndFuncs.actionProperties\nif otherProperties[actionIndex]~=nil then\nfor _,entry in pairs(otherProperties[actionIndex]) do\nif string.match(entry,\"isRepeatable\") then\naction.actionProperties.isRepeatable=true\nelseif string.match(entry,\"canBeUndone\") then\naction.actionProperties.canBeUndone=true\nend\nend\nend\nif actionPropertiesAndFuncs.actionFuncs.onActivated~=nil then\naction.onActivated=actionPropertiesAndFuncs.actionFuncs.onActivated\nend\nif actionPropertiesAndFuncs.actionFuncs.preActivation~=nil then\naction.preActivation=actionPropertiesAndFuncs.actionFuncs.preActivation\nend\nif actionPropertiesAndFuncs.actionFuncs.undoPreCondition~=nil then\naction.undoPreCondition=actionPropertiesAndFuncs.actionFuncs.undoPreCondition\nend\nif actionPropertiesAndFuncs.actionFuncs.undoActivated~=nil then\naction.undoActivated=actionPropertiesAndFuncs.actionFuncs.undoActivated\nend\ntable.insert(actionDefinitions,action)\nend\nreturn actionDefinitions\nend\nfunction createActionProperties(rawCost,rawEffects)\nlocal actionProperties={resourceValues={},productionValues={},effects={}}\nlocal actionFuncs={}\nfor _,effect in pairs(rawCost.singleValues) do\ntable.insert(actionProperties.effects,effect)\nend\nfor rawKey,value in pairs(rawCost.keyValuePairs) do\nlocal key=translateKey(rawKey)\nif key.type==\"resource\" then\nactionProperties.resourceValues[key.value]=-value\nelseif key.type==\"production\" then\nactionProperties.productionValues[key.value]=-value\nelseif key.type==\"counter\" then\nactionFuncs.preActivation=function(playerColor) return checkCounterAvailabilityCondition(1,value)() end\nactionFuncs.onActivated=function(playerColor) changeCounterEffect(1,-value)() end\nactionFuncs.undoActivated=function(playerColor) return changeCounterEffect(1,value)() end\nend\nend\nfor _,effect in pairs(rawEffects.singleValues) do\ntable.insert(actionProperties.effects,effect)\nend\nfor rawKey,value in pairs(rawEffects.keyValuePairs) do\nlocal key=translateKey(rawKey)\nif key.type==\"resource\" then\nif actionProperties.resourceValues[key.value]~=nil then\nlog(\"Warning: Reducing and increasing the same resource storage with the same action is not supported. Check card description.\")\nend\nactionProperties.resourceValues[key.value]=value\nelseif key.type==\"production\" then\nif actionProperties.productionValues[key.value]~=nil then\nlog(\"Warning: Reducing and increasing the same production with the same action is not supported. Check card description.\")\nend\nactionProperties.productionValues[key.value]=value\nelseif key.type==\"counter\" then\nif actionFuncs.onActivated~=nil then\nlog(\"Warning: Adding and subtracting counters is not supported for the same action. Check card description.\")\nend\nactionFuncs.onActivated=function(playerColor) changeCounterEffect(1,value)() end\nactionFuncs.undoPreCondition=function(playerColor) return checkCounterAvailabilityCondition(1,value)() end\nactionFuncs.undoActivated=function(playerColor) return changeCounterEffect(1,-value)() end\nend\nend\nreturn {actionProperties=actionProperties,actionFuncs=actionFuncs}\nend\nfunction translateKey(rawKey)\nif rawKey==\"Counter\" then\nreturn {type=\"counter\"}\nend\nlocal isProduction=string.match(rawKey,\"Prod\")\nif isProduction then\nlocal truncatedKey=string.sub(rawKey,0,-5)\nreturn {type=\"production\",value=truncatedKey}\nelse\nreturn {type=\"resource\",value=rawKey}\nend\nend\nfunction splitStringInTwoHalfs(inputTable,pattern)\nlocal leftSide={}\nlocal rightSide={}\nlocal index=0\nfor i,value in pairs(inputTable) do\nif value==pattern then\nindex=index + 1\nelseif index==0 then\ntable.insert(leftSide,value)\nelse\ntable.insert(rightSide,value)\nend\nend\nreturn {leftSide=leftSide,rightSide=rightSide}\nend\nfunction sortByKeyValuePairsAndSingleValues(half)\nlocal keyValuePairs={}\nlocal singleValues={}\nlocal latestNumber={}\nlocal nextNumberOffsetExpected=1\nfor i,value in pairs(half) do\nif (i + nextNumberOffsetExpected)%2==0 then\nif tonumber(value)~=nil then\nlatestNumber=tonumber(value)\nelse\nnextNumberOffsetExpected=( nextNumberOffsetExpected + 1 ) % 2\ntable.insert(singleValues,value)\nend\nelse\nkeyValuePairs[value]=latestNumber\nend\nend\nreturn {singleValues=singleValues,keyValuePairs=keyValuePairs}\nend\n\n\n\nownableObjects={}\nownableObjects.specialTileMappings={}\nownableObjects.specialTileMappings.aliases={\nredCity={\"cityTile\",\"specialTile\"},\nnewVenice={\"cityTile\",\"specialTile\"},\ncapitalCity={\"cityTile\",\"specialTile\"},\nwetlands={\"greenery\",\"specialTile\"},\ncommercialDistrict={\"specialTile\"}\n}\nownableObjects.baseGame={}\nownableObjects.baseGame.tiles={\ngreenery=\"greenery\",\ncity=\"cityTile\",\ncityTile=\"cityTile\",\ncapitalCity=\"capitalCity\",\nmine=\"mine\",\npreservationArea=\"preservationArea\",\nmohole=\"mohole\",\nvolcano=\"volcano\",\nrestrictedArea=\"restrictedArea\",\ncommercialDistrict=\"commercialDistrict\",\nspacePort=\"spacePort\",\nganymedColony=\"ganymedColony\",\nindustrialZone=\"industrialZone\",\nnuclearZone=\"nuclearZone\",\nnaturalPreserve=\"naturalPreserve\",\nspecialTile=\"specialTile\",\nspaceCityTile=\"spaceCityTile\",\n}\nownableObjects.baseGame.cardResources={\nanimal=\"animal\",\nmicrobe=\"microbe\",\nscience=\"science\",\nfighter=\"fighter\",\n}\nownableObjects.baseGame.friendlyNameMapping={\ngreenery={\"Greenery\"},\ncityTile={\"CityTile\",\"cityTile\"},\nspecialTile={\"specialTile\"}\n}\nownableObjects.venus={}\nownableObjects.venus.tiles={\nmaxwellBase=\"maxwellBase\",\nstratopolis=\"stratopolis\",\nlunaMetropolis=\"lunaMetropolis\",\ndawnCity=\"dawnCity\",\n}\nownableObjects.venus.cardResources={\nasteroid=\"asteroid\",\nfloater=\"floater\",\n}\nownableObjects.venus.friendlyNameMapping={\nasteroid={\"Asteroid\"},\nfloater={\"Floater\"}\n}\nownableObjects.colonies={}\nownableObjects.colonies.objects={\ncolony=\"colony\",\n}\nownableObjects.colonies.cardResources={\nrefugee=\"refugee\",\n}\nownableObjects.colonies.friendlyNameMapping={\ncolony={\"Colony\",\"Colonies\"},\n}\nownableObjects.turmoil={}\nownableObjects.turmoil.tiles={\nstanfordTorus=\"stanfordTorus\",\n}\nownableObjects.turmoil.friendlyNameMapping={}\nownableObjects.pathfinder={}\nownableObjects.pathfinder.tiles={\nredCity=\"redCity\",\nnewVenice=\"newVenice\",\ncrashSite=\"crashSite\",\nwetlands=\"wetlands\"\n}\nownableObjects.pathfinder.cardResources={\nhabitat=\"habitat\",\nrobot=\"robot\",\ndata=\"data\",\n}\nownableObjects.highOrbit={}\nownableObjects.highOrbit.cardResources={\nore=\"ore\",\n}\nownableObjects.venusPhaseTwo={}\nownableObjects.venusPhaseTwo.tiles={\nfloatingArray=\"floatingArray\",\ngasMine=\"gasMine\",\nvenusHabitat=\"venusHabitat\",\n}\nownableObjects.pathfinder.friendlyNameMapping={}\nfunction createOwnableObjectsCollection()\nlocal collection={}\nfor _,expansion in pairs(ownableObjects) do\nfor _,objectType in pairs(expansion) do\nif objectType~=\"friendlyNameMapping\" then\nfor key,value in pairs(objectType) do\ncollection[key]=0\nend\nend\nend\nend\nreturn collection\nend\n\ncounterData={}\ncounterData={\nAnimal={tokensAccepted={\"Animal\",\"WildCard\"},\ncolor={0,0.5,0,1},\ntransparentColor={0,0.5,0,0.85},\nfontColor={0,0,0,1},\ncounterType=ownableObjects.baseGame.cardResources.animal},\nMicrobe={tokensAccepted={\"Microbe\",\"WildCard\"},\ncolor={0.25,0.94,0.11,1},\ntransparentColor={0.25,0.94,0.11,0.8},\nfontColor={0,0,0,1},\ncounterType=ownableObjects.baseGame.cardResources.microbe},\nFloater={tokensAccepted={\"Floater\",\"WildCard\"},\ncolor={0.918,0.871,0,1},\ntransparentColor={0.918,0.871,0,0.8},\nfontColor={0,0,0,1},\ncounterType=ownableObjects.venus.cardResources.floater},\nScience={tokensAccepted={\"Science\",\"WildCard\"},\ncolor={1,1,1,1},\ntransparentColor={1,1,1,0.8},\nfontColor={0,0,0,1},\ncounterType=ownableObjects.baseGame.cardResources.science},\nAsteroid={tokensAccepted={\"Asteroid\",\"WildCard\"},\ncolor={0.1,0.1,0.1,1},\ntransparentColor={0.1,0.1,0.1,0.8},\nfontColor={1,1,1,1},\ncounterType=ownableObjects.venus.cardResources.asteroid},\nData={tokensAccepted={\"Data\",\"WildCard\"},\ncolor={255/255,126/255,40/255,1},\ntransparentColor={255/255,126/255,40/255,0.8},\nfontColor={0,0,0,1},\ncounterType=ownableObjects.pathfinder.cardResources.data},\nFighter={tokensAccepted={\"Fighter\",\"WildCard\"},\ncolor={0.1,0.1,0.1,1},\ntransparentColor={0.1,0.1,0.1,0.8},\nfontColor={1,1,1,1},\ncounterType=ownableObjects.baseGame.cardResources.fighter},\nRobot={tokensAccepted={\"WildCard\"},\ncolor={1,1,1,1},\ntransparentColor={1,1,1,0.8},\nfontColor={0,0,0,1},\ncounterType=ownableObjects.pathfinder.cardResources.robot},\nHabitat={tokensAccepted={\"WildCard\"},\ncolor={0.1,0.1,1,1},\ntransparentColor={0.1,0.1,1,0.8},\nfontColor={0,0,0,1},\ncounterType=ownableObjects.pathfinder.cardResources.data},\nOre={tokensAccepted={\"Ore,WildCard\"},\ncolor={141/255,111/255,105/255,0.9},\ntransparentColor={141/255,111/255,105/255,0.8},\nfontColor={1,1,1,1},\ncounterType=ownableObjects.highOrbit.cardResources.ore},\nRefugee={tokensAccepted={\"WildCard\"},\ncolor={255/255,130/255,15/255,0.9},\ntransparentColor={255/255,130/255,15/255,0.8},\nfontColor={0,0,0,1},\ncounterType=ownableObjects.colonies.cardResources.refugee},\nOther={tokensAccepted={},\ncolor={0.5,0.5,0.5,1},\ntransparentColor={0.5,0.5,0.5,0.9},\nfontColor={0,0,0,1},\ncounterType=nil},\n}\n\n\n\neventData={}\neventData.triggerType={\ncityPlayed=\"cityPlayed\",\nspaceCityPlayed=\"spaceCityPlayed\",\nmarsCityPlayed=\"marsCityPlayed\",\ngreeneryPlayed=\"greeneryPlayed\",\noceanPlayed=\"oceanPlayed\",\ncolonyPlayed=\"colonyPlayed\",\nproductionChanged=\"productionChanged\",\nvenusTerraformed=\"venusTerraformed\",\noxygenIncreased=\"oxygenIncreased\",\nbuildingTagPlayed=\"buildingTagPlayed\",\nspaceTagPlayed=\"spaceTagPlayed\",\npowerTagPlayed=\"powerTagPlayed\",\nscienceTagPlayed=\"scienceTagPlayed\",\njovianTagPlayed=\"jovianTagPlayed\",\nearthTagPlayed=\"earthTagPlayed\",\nvenusTagPlayed=\"venusTagPlayed\",\nplantTagPlayed=\"plantTagPlayed\",\nmicrobeTagPlayed=\"microbeTagPlayed\",\nanimalTagPlayed=\"animalTagPlayed\",\nnoneTagPlayed=\"noneTagPlayed\",\neventTagPlayed=\"eventTagPlayed\",\nmarsTagPlayed=\"marsTagPlayed\",\ninfrastructureTagPlayed=\"infrastructureTagPlayed\",\nvpCardPlayed=\"vpCardPlayed\",\nanimalResourceGained=\"animalResourceGained\",\nmicrobeResourceGained=\"microbeResourceGained\",\nfloaterResourceGained=\"floaterResourceGained\",\nscienceResourceGained=\"scienceResourceGained\",\nfighterResourceGained=\"fighterResourceGained\",\ndataResourceGained=\"dataResourceGained\",\nasteroidResourceGained=\"asteroidResourceGained\",\npayTwentyCostCard=\"payTwentyCostCard\",\nstandardProjectCity=\"standardProjectCity\",\nstandardProjectGreenery=\"standardProjectGreenery\",\nstandardProjectOcean=\"standardProjectOcean\",\nstandardProjectTemperature=\"standardProjectTemperature\",\nstandardProjectPowerPlant=\"standardProjectPowerPlant\",\nstandardProjectVenus=\"standardProjectVenus\",\nstandardProjectColony=\"standardProjectColony\",\nbuyStandardProject=\"buyStandardProject\",\ncardWithRequirmentPlayed=\"cardWithRequirmentPlayed\",\nspecialTilePlayed=\"specialTilePlayed\",\nincreasePathfinderVenus=\"increasePathfinderVenus\",\nincreasePathfinderEarth=\"increasePathfinderEarth\",\nincreasePathfinderMars=\"increasePathfinderMars\",\nincreasePathfinderJovian=\"increasePathfinderJovian\",\nterraformingGained=\"terraformingGained\",\nmarsTilePlaced=\"marsTilePlaced\",\nvenusTilePlaced=\"venusTilePlaced\",\nturmoilFactionChanged=\"turmoilFactionChanged\",\nspecialTilePlayed=\"specialTilePlayed\",\nproductionPhase=\"productionPhase\",\nnewGeneration=\"newGeneration\",\ncardPlayed=\"cardPlayed\",\nturmoilNewGovernment=\"turmoilNewGovernment\",\nactionPerformed=\"actionPerformed\",\nplayerPerformedAction=\"playerPerformedAction\",\npayedForCard=\"payedForCard\",\nconversionRatesUpdated=\"conversionRatesUpdated\",\nplayerTurnBegan=\"playerTurnBegan\",\nplanetWildCardTokenAbsorbed=\"planetWildCardTokenAbsorbed\",\ncolonyTraded=\"colonyTraded\",\nbuyVenusStandardProject=\"buyVenusStandardProject\",\nvenusHabitatPlaced=\"venusHabitatPlaced\",\nstorageChanged=\"storageChanged\",\noceanRemoved=\"oceanRemoved\",\nplayerTurnEnd=\"playerTurnEnd\",\n}\neventData.triggerScope={\nanyPlayer=\"anyPlayer\",\nplayerThemself=\"playerThemself\",\notherPlayers=\"otherPlayers\",\nnoPlayer=\"noPlayer\",\n}\neventData.allowedPhasesToTrigger={\nsolarPhase=\"solarPhase\",\ngameEnd=\"gameEnd\",\ndraft=\"draft\",\ninRound=\"inRound\",\n}\n\n\nphases={\ngenerationPhase=\"generationPhase\",\nsolarPhase=\"solarPhase\",\ngameEndPhase=\"gameEndPhase\",\ndraftingPhase=\"draftingPhase\",\ngameStartPhase=\"gameStartPhase\",\ngameSetupPhase=\"gameSetupPhase\",\n}\n\neventHandlers={}\nfunction registerEventHandlers(owner)\nfor _,eventHandler in pairs(eventHandlers) do\nGlobal.call(\"eventHandling_subscribeHandler\",{eventHandler=eventHandler,owner=owner})\nend\nend\nfunction unregisterEventHandlers(triggerTypeToUnsubscribe)\nfor _,eventHandler in pairs(eventHandlers) do\nif eventHandler.triggerType==triggerTypeToUnsubscribe then\nGlobal.call(\"eventHandling_unsubscribeHandler\",{eventHandler=eventHandler})\nend\nend\nend\nfunction setupEventHandler(triggerType,triggerScope,actionIndex,params)\nlocal callbackName=\"triggerActionRemotely\"\nlocal allowedPhases={phases.generationPhase,phases.gameStartPhase,phases.gameEndPhase,phases.draftingPhase}\nlocal prettyName=self.getName()\nif params~=nil then\nif params.callbackName~=nil then\ncallbackName=params.callbackName\nend\nif params.allowedPhases~=nil then\nallowedPhases=params.allowedPhases\nend\nif params.objectPrettyName~=nil then\nprettyName=params.objectPrettyName\nend\nend\nlocal eventHandler={eventHandlerId=self.guid,\ntriggerType=triggerType,\ntriggerScope=triggerScope,\nactionIndex=actionIndex,\ncallbackName=callbackName,\nallowedPhases=allowedPhases,\nobjectPrettyName=prettyName}\ntable.insert(eventHandlers,eventHandler)\nend\n\naction=true\r\nspawnedButtons=0\r\nspentColor={1,0,0,0.75}\r\navailableColor={0,1,0,0.75}\r\nrepeatableColor={75/255,1,1,0.75}\r\ndefaultCardState={\r\ncounters={},\r\nactionUsed=false,\r\nactive=false,\r\nisBasicScriptingCard=true,\r\ninActivatonZone=false,\r\ntokensAccepted={},\r\nmainCounterType=nil,\r\nisAutomatic=true,\r\nwasUpdated=true,\r\ncustomCounterType=\"Other\",\r\n}\r\nbuttonSetup.activateButtons[1].click_function=\"activationOverride\"\r\nfunction loadCallback(is_savegame)\r\nsetupFromDescription()\r\nif cardState.customCounterType~=nil then\r\napplyCounterType(cardState.customCounterType)\r\nend\r\nend\r\nfunction activationOverride(_,playerColor)\r\nsetupFromDescription()\r\nactivateCard(_,playerColor)\r\nend\r\nfunction getAcceptedTokenList()\r\nif cardState.tokensAccepted==nil then\r\nreturn {}\r\nend\r\nreturn cardState.tokensAccepted\r\nend\r\nfunction getMainCounterType()\r\nsetupFromDescription()\r\nreturn cardState.mainCounterType\r\nend\r\nfunction setupFromDescription()\r\nif #buttonSetup.actions==0 and #buttonSetup.counters==0 then\r\nlocal rawData=Global.call(\"descriptionInterpreter_getActionCardInfos\",self.getDescription())\r\nlocal descriptionActionInfos=actionCardInterpreter.translateRawData(rawData)\r\ninitSimpleActionButtons(#descriptionActionInfos.actions)\r\nsetupDescriptionBasedActionButtons(descriptionActionInfos)\r\nsetupDescriptionBasedCounterButtons(descriptionActionInfos)\r\nsetupDescriptionBasedEventHandlers(descriptionActionInfos)\r\nend\r\nend\r\nfunction setupDescriptionBasedEventHandlers(descriptionActionInfos)\r\nfor _,eventHandler in pairs(descriptionActionInfos.eventHandlers) do\r\nif eventHandler.allowedPhases~=nil then\r\nsetupEventHandler(eventHandler.triggerType,eventHandler.triggerScope,eventHandler.actionIndex,{allowedPhases=eventHandler.allowedPhases})\r\nelse\r\nsetupEventHandler(eventHandler.triggerType,eventHandler.triggerScope,eventHandler.actionIndex )\r\nend\r\nend\r\nend\r\nfunction setupDescriptionBasedActionButtons(descriptionActionInfos)\r\nfor actionIndex,actionInfo in pairs(descriptionActionInfos.actions) do\r\nbuttonSetup.actions[actionIndex].actionProperties=actionInfo.actionDefinition.actionProperties\r\nlocal actionFuncs=actionInfo.actionDefinition.actionFuncs\r\nif actionInfo.actionDefinition~=nil then\r\nif actionInfo.actionDefinition.onActivated~=nil then\r\nbuttonSetup.actions[actionIndex].onActivated=actionInfo.actionDefinition.onActivated\r\nend\r\nif actionInfo.actionDefinition.preActivation~=nil then\r\nbuttonSetup.actions[actionIndex].preActivation=actionInfo.actionDefinition.preActivation\r\nend\r\nif actionInfo.actionDefinition.actionProperties.canBeUndone then\r\nif actionInfo.actionDefinition.undoActivated~=nil then\r\nbuttonSetup.actions[actionIndex].undoActivated=actionInfo.actionDefinition.undoActivated\r\nend\r\nif actionInfo.actionDefinition.undoPreCondition~=nil then\r\nbuttonSetup.actions[actionIndex].undoPreCondition=actionInfo.actionDefinition.undoPreCondition\r\nend\r\nend\r\nend\r\nlocal buttonInfoOverride=actionInfo.buttonInfo\r\nif buttonInfoOverride~=nil then\r\napplyButtonOverrides(buttonSetup.actions[actionIndex],buttonInfoOverride)\r\nend\r\nend\r\nend\r\nfunction applyCounterFormula(formula,counterIndex,playerColor)\r\nlocal output=Global.call(\"getSpecificPlayerPropertiesRemotely\",{formula=formula,playerColor=playerColor})\r\nchangeCounter(counterIndex,output)\r\nend\r\nfunction setupDescriptionBasedCounterButtons(descriptionActionInfos)\r\nfor _,counter in pairs(descriptionActionInfos.counters) do\r\nif buttonSetup.counters==nil then\r\nbuttonSetup.counters={}\r\nend\r\nif counter.name==\"BaseCounter\" then\r\nbuttonSetup.counters[1]=buttonSetup.defaultCounter\r\nbuttonSetup.counters[1].startCount=counter.startCount\r\nif setupCounters==nil and counter.startCount~=nil then\r\nsetupCounters=function(playerColor)\r\nchangeCounter(1,counter.startCount.simple)\r\nfor _,formula in pairs(counter.startCount.complex) do\r\napplyCounterFormula(formula,1,playerColor)\r\nend\r\nend\r\nend\r\napplyButtonOverrides(buttonSetup.counters[1],counter)\r\nelseif counter.name==\"VPCounter\" then\r\nbuttonSetup.counters[2]=buttonSetup.defaultVpCounter\r\napplyButtonOverrides(buttonSetup.counters[2],counter)\r\nend\r\nend\r\ncardState.customCounterType=descriptionActionInfos.counterType\r\nend\r\nfunction setupBlueCard(playerColor)\r\nif cardState.mainCounterType==nil then\r\napplyCounterType(cardState.customCounterType)\r\nend\r\nif setupCounters~=nil then\r\nsetupCounters(playerColor)\r\nend\r\ncardState.wasUpdated=true\r\nend\r\nfunction applyCounterType(counterType)\r\nif counterType~=nil then\r\nlocal data=counterData[counterType]\r\nif data==nil then\r\ndata=counterData[\"Other\"]\r\nend\r\ncardState.mainCounterType=data.counterType\r\nif cardState.tokensAccepted==nil or next(cardState.tokensAccepted)==nil then\r\ncardState.tokensAccepted=data.tokensAccepted\r\nend\r\nbuttonSetup.defaultCorpCounter.color=data.transparentColor\r\nbuttonSetup.defaultCorpCounter.font_color=data.fontColor\r\nbuttonSetup.defaultCounter.color=data.transparentColor\r\nbuttonSetup.defaultCounter.font_color=data.fontColor\r\nbuttonSetup.defaultVpCounter.color=data.color\r\nbuttonSetup.defaultVpCounter.font_color=data.fontColor\r\nbuttonSetup.defaultTagCounter.color=data.color\r\nbuttonSetup.defaultTagCounter.font_color=data.fontColor\r\nend\r\nend\r\nfunction applyButtonOverrides(button,overrides)\r\nif overrides.width~=nil then\r\nbutton.width=overrides.width\r\nend\r\nif overrides.height~=nil then\r\nbutton.height=overrides.height\r\nbutton.font_size=400 * overrides.height / 450\nend\r\nif overrides.position~=nil then\r\nbutton.position=overrides.position\r\nend\r\nif overrides.color~=nil then\r\nbutton.color=overrides.color\r\nend\r\nend\r\nfunction createButtons()\r\nif string.match(self.getDescription(),\":DebugMode:\") then\r\nWait.frames(createButtonsDebug(),20)\r\nelse\r\nif cardState.active then\r\ncreateActionButtons()\r\nif next(eventHandlers)~=nil then\r\ncreateCardModeButton()\r\nend\r\ncreateCounters()\r\nelse\r\ncreateActivateButtons()\r\nend\r\nend\r\ncardState.wasUpdated=true\r\nend\r\nfunction createButtonsDebug()\r\nfunction debug()\r\nremoveButtons()\r\ncoroutine.yield(0)\r\nspawnedButtons=0\r\nbuttonSetup.actions={}\r\nbuttonSetup.counters={}\r\nbuttonSetup.cardMode.index=nil\r\ncoroutine.yield(0)\r\nsetupFromDescription()\r\ncoroutine.yield(0)\r\nif cardState.active then\r\ncreateActionButtons(true)\r\ncoroutine.yield(0)\r\nif next(eventHandlers)~=nil then\r\ncreateCardModeButton()\r\ncoroutine.yield(0)\r\nend\r\ncreateCounters(true)\r\ncoroutine.yield(0)\r\nelse\r\ncreateActivateButtons()\r\ncoroutine.yield(0)\r\nend\r\nreturn 1\r\nend\r\nstartLuaCoroutine(self,\"debug\")\r\nend\r\nfunction initSimpleActionButtons(numberOfNewActions)\r\nbuttonSetup.actions={}\r\nlocal actionIndexOffset=#buttonSetup.actions\r\nfor i=1,numberOfNewActions do\r\nlocal addedActionIndex=i + actionIndexOffset\r\nlocal actionName=\"actionButtonFunc_\"..addedActionIndex\r\nlocal func=function(_,playerColor,altClick) actionCheckSimple(addedActionIndex,playerColor,altClick) end\r\nself.setVar(actionName,func)\r\nlocal button={\r\nclick_function=actionName,\r\nfunction_owner=self,\r\nposition=vector(0,0.25,-0.9 + (i-1) * 0.3),\r\nheight=170,\r\nwidth=850,\r\nalignment=3,\r\ncolor={0,1,0,0.75}\r\n}\r\ntable.insert(buttonSetup.actions,button)\r\nend\r\nend\r\nfunction createCardModeButton()\r\nif buttonSetup.cardMode==nil or not Global.call(\"getExtendedScriptingState\") then\r\nreturn\r\nend\r\nif not cardState.isAutomatic then\r\nbuttonSetup.cardMode.label=\"Manual Mode\"\r\nbuttonSetup.cardMode.color={1,1,0,0.85}\r\nbuttonSetup.cardMode.tooltip=\"Card effects have to be triggered manually.\"\r\nend\r\nlocal buttonInfo=buttonSetup.cardMode\r\nif buttonSetup.cardMode.index~=nil then\r\nself.editButton(buttonInfo)\r\nelse\r\nbuttonSetup.cardMode.index=spawnedButtons\r\nself.createButton(buttonInfo)\r\nspawnedButtons=spawnedButtons + 1\r\nend\r\nend\r\nfunction createCounters(isDebug)\r\nif cardState.counters==nil then\r\ncardState.counters={}\r\nend\r\nfor i=1,#buttonSetup.counters do\r\nlocal buttonInfo=buttonSetup.counters[i]\r\nif buttonInfo.counterIndex~=nil then\r\nif cardState.counters[buttonInfo.counterIndex]==nil then\r\ncardState.counters[buttonInfo.counterIndex]=0\r\nend\r\nbuttonInfo.label=cardState.counters[buttonInfo.counterIndex]\r\nelse\r\nif cardState.counters[i]==nil then\r\ncardState.counters[i]=0\r\nend\r\nbuttonInfo.label=cardState.counters[i]\r\nend\r\nif buttonInfo.index~=nil and not isDebug then\r\nself.editButton(buttonInfo)\r\nelse\r\nbuttonSetup.counters[i].index=spawnedButtons\r\nself.createButton(buttonInfo)\r\nspawnedButtons=spawnedButtons + 1\r\nend\r\nend\r\nend\r\nfunction createActionButtons(isDebug)\r\nfor i=1,#buttonSetup.actions do\r\nif buttonSetup.actions[i].actionProperties==nil then\r\nbuttonSetup.actions[i].actionProperties={resourceValues={},productionValues={},effects={}}\r\nend\r\nlocal buttonInfo=buttonSetup.actions[i]\r\nif cardState.actionUsed and not buttonSetup.actions[i].actionProperties.isRepeatable then\r\nif not buttonInfo.customColors then\r\nbuttonInfo.color=spentColor\r\nend\r\nelse\r\nif not buttonInfo.customColors then\r\nif buttonSetup.actions[i].actionProperties.isRepeatable then\r\nbuttonInfo.color=repeatableColor\r\nelse\r\nbuttonInfo.color=availableColor\r\nend\r\nend\r\nend\r\nif buttonSetup.actions[i].index~=nil and not isDebug then\r\nself.editButton(buttonInfo)\r\nelse\r\nbuttonSetup.actions[i].index=spawnedButtons\r\nself.createButton(buttonInfo)\r\nspawnedButtons=spawnedButtons + 1\r\nend\r\nend\r\nend\r\nfunction addSubtractCounterButtonClick(obj,player_color,altClick)\r\naddSubtractCounter(altClick,1)\r\nif not altClick then\r\nabsorbTokenFromHand()\r\nend\r\nend\r\nfunction addSubtractCounter(altClick,index)\r\nif altClick and cardState.counters[index] > 0 then\r\nchangeCounter(index,-1)\r\nelseif not altClick then\r\nchangeCounter(index,1)\r\nelse\r\nreturn\r\nend\r\ncreateButtons()\r\nend\r\nfunction changeCounterRemotely(params)\r\nchangeCounter(params.counterIndex,params.amount)\r\ncreateButtons()\r\nend\r\nfunction changeCounterByCardAction(counterIndex,amount,actionIndex)\r\nchangeCounter(counterIndex,amount)\r\nend\r\nfunction changeCounter(counterIndex,amount)\r\nif cardState.counters[counterIndex]==nil then\r\ncardState.counters[counterIndex]=0\r\nend\r\nlocal actualAmount=amount\r\nif cardState.counters[counterIndex] + amount < 0 then\r\nactualAmount=-cardState.counters[counterIndex]\r\nend\r\ncardState.counters[counterIndex]=cardState.counters[counterIndex] + actualAmount\r\nif cardState.mainCounterType~=nil and cardState.owner~=nil and counterIndex==1 then\r\nGlobal.call(\"updateOwnableObjects\",{playerColor=cardState.owner,ownableObjectName=cardState.mainCounterType,delta=actualAmount})\r\nend\r\nend\r\nfunction defaultAddCounterAction(obj,playerColor,altClick)\r\nif cardState.actionUsed and altClick then\r\ncardState.actionUsed=false\r\naddSubtractCounterButtonClick(nil,nil,altClick)\r\nelseif cardState.actionUsed and not altClick then\r\nGlobal.call(\"logging_printToColor\",{\r\nmessage=\"Action already used this generation\",\r\nplayerColor=playerColor,\r\nmessageColor={1,1,1},\r\nloggingMode=\"essential\",\r\n})\r\nelse\r\ncardState.actionUsed=true\r\naddSubtractCounterButtonClick(nil,nil,false)\r\nend\r\nend\r\nbuttonSetup.counters={}\r\nbuttonSetup.defaultCounter={\r\nlabel=\"\",\r\nclick_function=\"addSubtractCounterButtonClick\",\r\ntooltip=\"Left click to add 1 to counter\\nRight click to remove 1 from counter\",\r\nfunction_owner=self,\r\nposition={0,0.25,0.1},\r\ncounterIndex=1,\r\nheight=450,\r\nwidth=450,\r\nalignment=3,\r\nscale={x=1.5,y=1.5,z=1.15},\r\nfont_size=400,\r\nfont_color={0/255,0/255,0/255,1},\r\ncolor= defaultCounterColor or {180/255,180/255,180/255,1}\r\n}\r\nbuttonSetup.defaultCorpCounter={\r\nlabel=\"\",\r\nclick_function=\"addSubtractCounterButtonClick\",\r\ntooltip=\"Left click to add 1 to counter\\nRight click to remove 1 from counter\",\r\nfunction_owner=self,\r\nposition={-0.2,0.25,0.1},\r\ncounterIndex=1,\r\nheight=450,\r\nwidth=250,\r\nalignment=3,\r\nscale={x=1,y=1.5,z=1.15},\r\nfont_size=300,\r\nfont_color={0/255,0/255,0/255,1},\r\ncolor= defaultCounterColor or {180/255,180/255,180/255,1}\r\n}\r\nbuttonSetup.defaultVpCounter={\r\nlabel=\"\",\r\nclick_function=\"addSubtractCounterButtonClick\",\r\ntooltip=\"Left click to add 1 to counter\\nRight click to remove 1 from counter\",\r\nfunction_owner=self,\r\nposition={0.5,0.25,1.13},\r\ncounterIndex=1,\r\nheight=100,\r\nwidth=80,\r\nalignment=3,\r\nscale={x=1.5,y=1.5,z=1.15},\r\nfont_size=70,\r\nfont_color={0/255,0/255,0/255,1},\r\ncolor= defaultVPCounterColor or {180/255,180/255,180/255,1}\r\n}\r\nbuttonSetup.defaultTagCounter={\r\nlabel=\"\",\r\nclick_function=\"addSubtractCounterButtonClick\",\r\ntooltip=\"Left click to add 1 to counter\\nRight click to remove 1 from counter\",\r\nfunction_owner=self,\r\nposition={0.5,0.25,-0.87},\r\ncounterIndex=2,\r\nheight=100,\r\nwidth=80,\r\nalignment=3,\r\nscale={x=1.5,y=1.5,z=1.15},\r\nfont_size=70,\r\nfont_color={0/255,0/255,0/255,1},\r\ncolor= defaultCounterColor or {180/255,180/255,180/255,1}\r\n}\r\nbuttonSetup.actions={}\r\nfunction triggerActionRemotely(params)\r\nif cardState.isAutomatic~=nil and cardState.isAutomatic then\r\nactionCheckSimple(params.actionIndex,params.playerColor,false,true)\r\nend\r\nend\r\nfunction doAction(actionIndex,playerColor,isAutoTrigger)\r\nif not cardState.silentActions then\r\nif isAutoTrigger then\r\nGlobal.call(\"logging_printToAll\",{\r\nmessage=\"<<AUTO>> Effect on \"..self.getName()..\" triggered automatically for \"..playerColor,\r\nmessageColor=playerColor,\r\nloggingMode=\"detail\",\r\n})\r\nelse\r\nGlobal.call(\"logging_printToAll\",{\r\nmessage=playerColor..\" used card \"..self.getName(),\r\nmessageColor=playerColor,\r\nloggingMode=\"important\",\r\n})\r\nend\r\nend\r\nlocal action=buttonSetup.actions[actionIndex]\r\nif action.preActivation~=nil then\r\nlocal canBeActivated=action.preActivation(playerColor)\r\nif canBeActivated~=nil and not canBeActivated then\r\nreturn false\r\nend\r\nend\r\nif action.actionProperties.productionValues==nil then\r\naction.actionProperties.productionValues={}\r\nend\r\nif action.actionProperties.resourceValues==nil then\r\naction.actionProperties.resourceValues={}\r\nend\r\nif action.actionProperties.effects==nil then\r\naction.actionProperties.effects={}\r\nend\r\nlocal result=Global.call(\"objectActivationSystem_doAction\",{activationEffects=action.actionProperties,sourceName=self.getName(),playerColor=playerColor,object=self})\r\nif result==true and action.onActivated~=nil then\r\naction.onActivated(playerColor)\r\nend\r\nif action.actionProperties.isRepeatable then\r\nreturn false\r\nend\r\nreturn result\r\nend\r\nfunction undoAction(actionIndex,playerColor)\r\nlocal action=buttonSetup.actions[actionIndex]\r\nif not action.actionProperties.canBeUndone then\r\nreturn false\r\nend\r\nif action.undoPreCondition~=nil then\r\nlocal canBeActivated=action.undoPreCondition(playerColor)\r\nif canBeActivated~=nil and not canBeActivated then\r\nreturn false\r\nend\r\nend\r\nGlobal.call(\"logging_printToAll\",{\r\nmessage=playerColor..\" undoes action of card \"..self.getName(),\r\nmessageColor=playerColor,\r\nloggingMode=\"detail\",\r\n})\r\nif action.actionProperties.productionValues==nil then\r\naction.actionProperties.productionValues={}\r\nend\r\nif action.actionProperties.resourceValues==nil then\r\naction.actionProperties.resourceValues={}\r\nend\r\nif action.actionProperties.effects==nil then\r\naction.actionProperties.effects={}\r\nend\r\naction.actionProperties.resourceValues=invertValues(action.actionProperties.resourceValues)\r\naction.actionProperties.productionValues=invertValues(action.actionProperties.productionValues)\r\nlocal result=Global.call(\"objectActivationSystem_doAction\",{activationEffects=action.actionProperties,sourceName=self.getName(),playerColor=playerColor,object=self})\r\naction.actionProperties.resourceValues=invertValues(action.actionProperties.resourceValues)\r\naction.actionProperties.productionValues=invertValues(action.actionProperties.productionValues)\r\nif result==true and action.undoActivated~=nil then\r\naction.undoActivated(playerColor)\r\nend\r\nif action.actionProperties.isRepeatable then\r\nreturn true\r\nend\r\nreturn result\r\nend\r\nfunction invertValues(keyValuePairs)\r\nlocal invertedKeyValuePairs={}\r\nfor key,value in pairs(keyValuePairs) do\r\ninvertedKeyValuePairs[key]=-value\r\nend\r\nreturn invertedKeyValuePairs\r\nend\r\nfunction actionCheckSimple(actionIndex,playerColor,altClick,isAutoTrigger)\r\nif not buttonSetup.actions[actionIndex].actionProperties.isRepeatable then\r\nif cardState.actionUsed and not altClick then\r\nGlobal.call(\"logging_printToColor\",{\r\nmessage=self.getName()..\" card has already been used this generation!\",\r\nplayerColor=playerColor,\r\nmessageColor={1,1,1},\r\nloggingMode=\"important\",\r\n})\r\nelseif cardState.actionUsed and altClick then\r\nif undoAction(cardState.whichActionUsed,playerColor) then\r\ncardState.actionUsed=false\r\nend\r\nelseif not cardState.actionUsed and not altClick then\r\nif doAction(actionIndex,playerColor) then\r\ncardState.actionUsed=true\r\ncardState.whichActionUsed=actionIndex\r\nend\r\nend\r\nelse\r\ndoAction(actionIndex,playerColor,isAutoTrigger)\r\ncardState.whichActionUsed=actionIndex\r\nend\r\ncreateButtons()\r\nend\r\nfunction changeCounterEffect(counterIndex,amount)\r\nreturn function()\r\nchangeCounter(counterIndex,amount)\r\nreturn true\r\nend\r\nend\r\nfunction checkCounterAvailabilityCondition(counterIndex,amount)\r\nreturn function()\r\nif cardState.counters[counterIndex] < amount then\r\nGlobal.call(\"logging_printToAll\",{\r\nmessage=\"Player \"..cardState.owner..\" needs at least \"..amount..\" card resources in order to activate \"..self.getName(),\r\nmessageColor=cardState.owner,\r\nloggingMode=\"detail\",\r\n})\r\nend\r\nreturn cardState.counters[counterIndex] >= amount\r\nend\r\nend\r\nfunction setupSimpleCounterAction(actionIndex,counterIndex,amount,canUndo)\r\nif buttonSetup.actions[actionIndex].actionProperties==nil then\r\nbuttonSetup.actions[actionIndex].actionProperties={}\r\nend\r\nbuttonSetup.actions[actionIndex].onActivated=function(playerColor) changeCounterByCardAction(counterIndex,amount,actionIndex) end\r\nend\r\nfunction genEnd()\r\ncardState.actionUsed=false\r\ncreateButtons()\r\nend\r\nfunction addTokensToCard(params)\r\nfor i=1,params.quantity do\r\naddSubtractCounter(false,1)\r\nend\r\nend\r\nfunction toggleAutomatic(_,player_color,altClick)\r\nif cardState.isAutomatic then\r\nbuttonSetup.cardMode.label=\"Manual Mode\"\r\nbuttonSetup.cardMode.color={1,1,0,0.85}\r\nbuttonSetup.cardMode.tooltip=\"Card effects have to be triggered manually.\"\r\nelse\r\nbuttonSetup.cardMode.label=\"Automatic Mode\"\r\nbuttonSetup.cardMode.color=repeatableColor\r\nbuttonSetup.cardMode.tooltip=\"Card effects are triggered automatically.\"\r\nend\r\nif cardState.isAutomatic then\r\nGlobal.call(\"logging_printToColor\",{\r\nmessage=\"Switching mode of \"..self.getName()..\" from automatic to manual.\",\r\nplayerColor=player_color,\r\nmessageColor={1,1,1},\r\nloggingMode=\"unimportant\",\r\n})\r\nelse\r\nGlobal.call(\"logging_printToColor\",{\r\nmessage=\"Switching mode of \"..self.getName()..\" from manual to automatic.\",\r\nplayerColor=player_color,\r\nmessageColor={1,1,1},\r\nloggingMode=\"unimportant\",\r\n})\r\nend\r\ncardState.isAutomatic=not cardState.isAutomatic\r\ncreateButtons()\r\nend\r\nfunction absorbTokenFromHand()\r\nif cardState.owner~=nil and cardState.tokensAccepted~=nil then\r\nfor _,tokenName in pairs(cardState.tokensAccepted) do\r\nfor _,obj in pairs(Player[cardState.owner].getHandObjects()) do\r\nif obj.getVar(\"getTokenResourceName\")~=nil then\r\nif obj.call(\"getTokenResourceName\")==tokenName then\r\nobj.destruct()\r\nreturn\r\nend\r\nend\r\nend\r\nend\r\nend\r\nend\r\nbuttonSetup.cardMode={\r\nclick_function=\"toggleAutomatic\",\r\nlabel=\"Automatic Mode\",\r\ntooltip=\"Card effects have to be triggered manually\",\r\nfunction_owner=self,\r\nposition=vector(-0.2,0.25,1.37),\r\nheight=150,\r\nwidth=800,\r\nalignment=3,\r\nscale=scale,\r\ncustomColors=true,\r\ncolor={0,1,0,0.85},\r\n}\r\n\ncardProperties={\ncardType=\"Blue\"\n}\n\n",
      "LuaScriptState": "{\"cardState\":{\"actionUsed\":false,\"active\":false,\"counters\":[],\"customCounterType\":\"Other\",\"inActivatonZone\":false,\"isAutomatic\":true,\"isBasicScriptingCard\":true,\"tokensAccepted\":[],\"wasUpdated\":false},\"scriptVersion\":1}",
      "XmlUI": ""
    }
  ]
}